janitor::clean_names() %>%
mutate(type_1_color = case_when(
type_1 == "Grass" ~ "#78c84f",
type_1 == "Fire" ~ "#f03838",
type_1 == "Water" ~ "#6790f0",
type_1 == "Bug" ~ "#a8b720",
type_1 == "Normal" ~ "#747474",
type_1 == "Poison" ~ "#9361c1",
type_1 == "Electric" ~ "#f1cf1e",
type_1 == "Ground" ~ "#705848",
type_1 == "Fairy" ~ "#ee99ac",
type_1 == "Fighting" ~ "#a8a878",
type_1 == "Psychic" ~ "#acd8d6",
type_1 == "Rock" ~ "#8f2f29",
type_1 == "Ghost" ~ "#c0acd8",
type_1 == "Ice" ~ "#74b7cf",
type_1 == "Dragon" ~ "#f08030",
type_1 == "Dark" ~ "#2e393d",
type_1 == "Steel" ~ "#e2e9ec",
type_1 == "Flying" ~ "#1eade5",
TRUE ~ ""
) )
pokemon %>%
group_by(type_1) %>%
select(type_1) %>%
unique()
?case_when
lvl_opts <-  list(
list(
level = 1,
borderWidth = 0,
borderColor = "transparent",
dataLabels = list(
enabled = TRUE,
align = "left",
verticalAlign = "top",
style = list(
fontSize = "12px",
textOutline = FALSE,
color = "white",
fontWeight = "normal"
)
)
),
list(
level = 2,
borderWidth = 0,
borderColor = "transparent",
colorVariation = list(key = "brightness", to = 0.250),
dataLabels = list(enabled = FALSE),
style = list(
fontSize = "8px",
textOutline = FALSE,
color = "white",
fontWeight = "normal"
)
)
)
pkmn_min <- pokemon |>
select(type_1, type_2, type_1_color) |>
mutate(type_1 = stringr::str_to_title(type_1)) |>
mutate(type_2 = ifelse(is.na(type_2), type_1, paste(type_1, "-", type_2))) |>
mutate(val = 1)
cols <- pkmn_min |>
count(type_1, type_2, type_1_color, sort = TRUE) |>
pull(type_1_color) |>
unique()
hchart(
data_to_hierarchical(pkmn_min, c(type_1, type_2), val, colors = cols),
type = "treemap",
# levelIsConstant = FALSE,
allowDrillToNode = TRUE,
levels = lvl_opts,
tooltip = list(valueDecimals = FALSE)
) |>
hc_chart(
#style = list(fontFamily = "Gloria Hallelujah")
) |>
hc_title(
text = "Attrapons-les tous",
#style = list(fontFamily = "Gloria Hallelujah")
) |>
hc_size(height = 700)
library(highcharter)
pokemon %>%
group_by(type_1) %>%
select(type_1) %>%
unique()
?case_when
lvl_opts <-  list(
list(
level = 1,
borderWidth = 0,
borderColor = "transparent",
dataLabels = list(
enabled = TRUE,
align = "left",
verticalAlign = "top",
style = list(
fontSize = "12px",
textOutline = FALSE,
color = "white",
fontWeight = "normal"
)
)
),
list(
level = 2,
borderWidth = 0,
borderColor = "transparent",
colorVariation = list(key = "brightness", to = 0.250),
dataLabels = list(enabled = FALSE),
style = list(
fontSize = "8px",
textOutline = FALSE,
color = "white",
fontWeight = "normal"
)
)
)
pkmn_min <- pokemon |>
select(type_1, type_2, type_1_color) |>
mutate(type_1 = stringr::str_to_title(type_1)) |>
mutate(type_2 = ifelse(is.na(type_2), type_1, paste(type_1, "-", type_2))) |>
mutate(val = 1)
cols <- pkmn_min |>
count(type_1, type_2, type_1_color, sort = TRUE) |>
pull(type_1_color) |>
unique()
hchart(
data_to_hierarchical(pkmn_min, c(type_1, type_2), val, colors = cols),
type = "treemap",
# levelIsConstant = FALSE,
allowDrillToNode = TRUE,
levels = lvl_opts,
tooltip = list(valueDecimals = FALSE)
) |>
hc_chart(
#style = list(fontFamily = "Gloria Hallelujah")
) |>
hc_title(
text = "Attrapons-les tous",
#style = list(fontFamily = "Gloria Hallelujah")
) |>
hc_size(height = 700)
hchart(
data_to_hierarchical(pkmn_min, c(type_1, type_2), val, colors = cols),
type = "treemap",
# levelIsConstant = FALSE,
allowDrillToNode = TRUE,
levels = lvl_opts,
tooltip = list(valueDecimals = FALSE)
)
hchart(
data_to_hierarchical(pkmn_min, c(type_1, type_2), val, colors = cols),
type = "treemap",
# levelIsConstant = FALSE,
allowDrillToNode = TRUE,
levels = lvl_opts,
tooltip = list(valueDecimals = FALSE)
)  |>
hc_title(
text = "Attrapons-les tous",
#style = list(fontFamily = "Gloria Hallelujah")
) |>
hc_size(height = 700)
hchart(
data_to_hierarchical(pkmn_min, c(type_1, type_2), val, colors = cols),
type = "treemap",
# levelIsConstant = FALSE,
allowDrillToNode = TRUE,
levels = lvl_opts,
tooltip = list(valueDecimals = FALSE)
)  |>
hc_title(
text = "Attrapons-les tous"
#style = list(fontFamily = "Gloria Hallelujah")
) |>
hc_size(height = 700)
install.packages('rgdal')
install.packages('rgdal')
install.packages('sf')
library(rgdal)
library(sf)
communes <- rgdal::readOGR("/Users/woza/Documents/dataScience/immo/data/raw/limadmin-shp/LIMADM_COMMUNES.shp",
verbose = FALSE)
sp.communes <- spTransform(communes, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
communes <- sf::st_read("/Users/woza/Documents/dataScience/immo/data/raw/limadmin-shp/LIMADM_COMMUNES.shp",
verbose = FALSE)
sf::st_read("/Users/woza/Documents/dataScience//Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES.shp")
sf::st_read("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES.shp")
sf::st_read("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES.shp")
communes <- rgdal::readOGR("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES.shp",
verbose = FALSE)
rgdal::readOGR("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES.shp")
install.packages('terra')
terra::vect("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES.shp")
sf::st_read("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES.shp")
?st_read
sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES.shp", layer = "SHAPEFILE")
sf::read_sf(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES.shp", layer = "SHAPEFILE")
sf::read_sf(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES.shx", layer = "SHAPEFILE")
rgdal::readOGR(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES.shx", layer = "SHAPEFILE")
communes <- rgdal::readOGR("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp",
verbose = FALSE)
st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp", layer = "SHAPEFILE")
sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp", layer = "SHAPEFILE")
sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp")
rgdal::readOGR("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp",
verbose = FALSE)
communes <- sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp")
sp.communes <- spTransform(communes, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
communes <- rgdal::readOGR("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp",
verbose = FALSE)
sp.communes <- spTransform(communes, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
communes <- sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp")
communes
sp.communes <- spTransform(communes, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
sp.communes <- st_transform(communes, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
communes <- sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp")
sp.communes <- st_transform(communes, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
sp.communes <- st_transform(communes, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
sp.communes <- st_transform(communes, crs("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
?st_transform
sp.communes <- st_transform(communes, st_crs("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
st_crs("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
sp.communes <- st_transform(communes, st_crs("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
?spTransform
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
terra::rast(crs="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
sp.communes <- st_transform(communes, st_crs("EPSG:4326"))
st_crs("EPSG:4326")
sp.communes <- st_transform(communes, st_crs("EPSG:4326"))
communes <- sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp")
communes <- sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp", crs = 4326)
sp.communes <- st_transform(communes)
leaflet(sp.communes) %>%
addTiles() %>%
addPolygons( stroke = TRUE, weight = 0.5,
opacity = 0.5, fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white",
weight = 0, bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
library(leaflet)
leaflet(sp.communes) %>%
addTiles() %>%
addPolygons( stroke = TRUE, weight = 0.5,
opacity = 0.5, fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white",
weight = 0, bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
View(sp.communes)
leaflet(sp.communes) %>%
addTiles()
leaflet(sp.communes) %>%
addTiles() %>%
addPolygons( stroke = TRUE, weight = 0.5,
opacity = 0.5, fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white",
weight = 0, bringToFront = TRUE))
communes <- sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp", crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
sp.communes <- st_transform(communes, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
leaflet(sp.communes)
leaflet(sp.communes) %>%
addTiles()
leaflet(sp.communes) %>%
addTiles() %>%
addPolygons( stroke = TRUE, weight = 0.5,
opacity = 0.5, fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white",
weight = 0, bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
communes <- rgdal::readOGR("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp",
verbose = FALSE)
sp.communes <- spTransform(communes, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
communes <- sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp", crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
communes <- sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp")
communes <- sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp", crs = 2169)
sp.communes <- st_transform(communes)
leaflet(sp.communes) %>%
addTiles() %>%
addPolygons( stroke = TRUE, weight = 0.5,
opacity = 0.5, fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white",
weight = 0, bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
sp.communes
leaflet(communes) %>%
addTiles()
leaflet(communes) %>%
addTiles() %>%
addPolygons( stroke = TRUE, weight = 0.5,
opacity = 0.5, fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white",
weight = 0, bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
View(communes)
View(communes[[1]][[1]])
sp.communes <- st_transform(communes, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
leaflet(sp.communes) %>%
addTiles() %>%
addPolygons( stroke = TRUE, weight = 0.5,
opacity = 0.5, fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white",
weight = 0, bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
communes <- sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES.shp", crs = 2169)
sp.communes <- st_transform(communes, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
leaflet(sp.communes) %>%
addTiles() %>%
addPolygons( stroke = TRUE, weight = 0.5,
opacity = 0.5, fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white",
weight = 0, bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
communes <- sf::st_read(dsn ="/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/LIMADM_COMMUNES0.shp", crs = 2169)
sp.communes <- st_transform(communes, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
leaflet(sp.communes) %>%
addTiles() %>%
addPolygons( stroke = TRUE, weight = 0.5,
opacity = 0.5, fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white",
weight = 0, bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
sp.communes <- st_transform(communes, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
leaflet(sp.communes) %>%
addTiles() %>%
addPolygons( stroke = TRUE, weight = 0.5,
opacity = 0.5, fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white",
weight = 0, bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
quartiers <- geojsonio::geojson_read("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/quartiers_lux.json", what = "sp")
quartiers_df <- broom::tidy(quartiers, region = "name") %>%
mutate(group=ifelse(str_detect(group,'onnevoie'), 'Bonnevoie.1', group),
id=ifelse(str_detect(id,'onnevoie'), 'Bonnevoie', id),)
library(stringr)
quartiers_df <- broom::tidy(quartiers, region = "name") %>%
mutate(group=ifelse(str_detect(group,'onnevoie'), 'Bonnevoie.1', group),
id=ifelse(str_detect(id,'onnevoie'), 'Bonnevoie', id),)
communes_df <- communes_df %>%
filter(tolower(id)!='luxembourg') %>%
rbind(quartiers_df) %>%
mutate_at(c(1,2), ~round(.,5)) %>%
unique() %>%
mutate(id=ifelse(id=="Neudorf/Weimershof /","Neudorf/Weimershof",id),
group=ifelse(group=="Neudorf/Weimershof /.1","Neudorf/Weimershof.1", group))
communes_df <- broom::tidy(sp.communes, region = "COMMUNE")
View(sp.communes)
View(sp.communes[[1]][[1]])
broom::tidy(sp.communes)
View(communes[[1]][[1]])
?tidy
sp.communes %>%
st_as_sf(coords = c("long", "lat")) %>%
group_by(id) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON")
sp.communes %>%
st_as_sf(coords = c("long", "lat"))
polys <- sp.communes %>%
st_as_sf(coords = c("long", "lat"))
polys <- polys %>%
mutate(pop = abs(round(rnorm(124,1700,245))))
polys <- polys %>%
mutate(pop = abs(round(rnorm(102,1700,245))))
pal <- colorNumeric("Blues", NULL)
labels <- paste0("<b>",polys$id, "</b><br>nb clients: ", formatC(polys$pop, big.mark = " ")) %>%
lapply(htmltools::HTML)
leaflet(polys) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(pop),
label = ~labels ) %>%
addLegend(pal = pal, values = ~pop, opacity = 0.7,
title = 'Nombre de clients', position = "bottomright") %>%
addProviderTiles(providers$CartoDB.Positron)
# Transformation
polys <- sp.communes %>%
st_as_sf(coords = c("long", "lat"))
polys <- polys %>%
mutate(pop = abs(round(rnorm(nrow(sp.communes),1700,245))))
pal <- colorNumeric("Blues", NULL)
labels <- paste0("<b>",polys$id, "</b><br>nb clients: ", formatC(polys$pop, big.mark = " ")) %>%
lapply(htmltools::HTML)
leaflet(polys) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(pop),
label = ~labels ) %>%
addLegend(pal = pal, values = ~pop, opacity = 0.7,
title = 'Nombre de clients', position = "bottomright") %>%
addProviderTiles(providers$CartoDB.Positron)
View(communes)
View(communes[[1]][[1]])
quartiers <- geojsonio::geojson_read("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/quartiers_lux.json", what = "sp")
quartiers
quartiers_df <- broom::tidy(quartiers, region = "name") %>%
mutate(group=ifelse(str_detect(group,'onnevoie'), 'Bonnevoie.1', group),
id=ifelse(str_detect(id,'onnevoie'), 'Bonnevoie', id),)
quartiers_df
quartiers
quartiers$name
quartiers_df
sp.communes$geometry
sp.communes$geometry
communes_df <- geojsonio::geojson_read("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/communes4326.geojson", what = "sp")
communes_df$COMMUNE
communes_df <- geojsonio::geojson_read("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/communes4326.geojson", what = "sp") %>%
broom::tidy(region = "COMMUNE")
communes_df <- geojsonio::geojson_read("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/communes4326.geojson", what = "sp")
broom::tidy(communes_df, region = "COMMUNE")
communes_df <- geojsonio::geojson_read("/Users/cerebro/Documents/dataScience/reveal_presentation/3_leaflet/www/communes4326.geojson", what = "sp") %>%
broom::tidy(.x, region = "COMMUNE")
communes_df <- communes_df %>%
filter(tolower(id)!='luxembourg') %>%
rbind(quartiers_df) %>%
mutate_at(c(1,2), ~round(.,5)) %>%
unique() %>%
mutate(id=ifelse(id=="Neudorf/Weimershof /","Neudorf/Weimershof",id),
group=ifelse(group=="Neudorf/Weimershof /.1","Neudorf/Weimershof.1", group))
n <- 4
communes[[1]][[1]]
n <- 4
actifs <- c("credit", "action", "cash", "autre")
# Creation Matrice resultat
loop_res <- matrix(nrow=1, ncol=n,
dimnames = list(NULL, actifs))
loop_res
loop_res[["credit"]]
loop_res["credit"]
library(tidyverse)
n <- 7000
id_client <- sample(1:5000, n, replace = TRUE)
credit <- rweibull(n, 1, 10^7)
# gestion_discret <- rweibull(n, 1, 10^7)
action <- rweibull(n, 1, 10^7)
cash <- rweibull(n, 1, 10^7)
autre <- rweibull(n, 1, 10^7)
info_pf <- tibble(id_client, credit, #gestion_discret,
action, cash, autre) %>%
mutate(type_client=sample(c('Personal Banking', 'Private Banking', 'CFG'), n, replace=TRUE),
year = sample(2015:2019, n, replace=TRUE)#,
# gestion_discret = case_when(
#   segment=="Personal Banking" ~ (gestion_discret - rweibull(1, 1, 10^(5.5)))/10,
#   segment=="Privale Banking" ~ (gestion_discret - rweibull(1, 1, 10^(3.5)))/10000,
#   TRUE ~ gestion_discret),
# gestion_discret = case_when(
#   segment=="Personal Banking" & gestion_discret > 100000 ~ (gestion_discret-100000)/10,
#   gestion_discret < 0 ~ 0,
#   segment=="Personal Banking" & gestion_discret > 1000000 ~  (gestion_discret-1000000)/100,
#   TRUE ~ gestion_discret)
) %>%
filter( type_client!='CFG' |
(type_client=='CFG' & #gestion_discret>1000000 &
#gestion_discret< 20000000 &
id_client<2000
)
)%>%
group_by(id_client, year) %>%
filter(row_number()==1) %>%
ungroup
pf2019 <- info_pf %>%
filter(year==2019)
loop_res
pf2019
for(actif in actifs){
loop_res[actif] <- sum(pf2019[actif])
}
loop_res
# Creation Matrice resultat
loop_res <- matrix(nrow=1, ncol=n,
dimnames = list(NULL, actifs))
actif
loop_res[actif]
# Creation Matrice resultat
loop_res <- matrix(nrow=1, ncol=n,
dimnames = list(NULL, actifs))
loop_res
loop_res <- matrix(nrow=1, ncol=n,
dimnames = list(NULL, actifs))
actifs
n <- 4
# Creation Matrice resultat
loop_res <- matrix(nrow=1, ncol=n,
dimnames = list(NULL, actifs))
loop_res
actif
loop_res[actif]
sum(pf2019[actif])
loop_res[actif] <- sum(pf2019[actif])
loop_res
# Creation Matrice resultat
loop_res <- matrix(nrow=1, ncol=n,
dimnames = list(NULL, actifs))
# Creation Matrice resultat
loop_res <- matrix(nrow=0, ncol=n,
dimnames = list(NULL, actifs))
loop_res
loop_res[actif] <- sum(pf2019[actif])
loop_res
for(actif in actifs){
loop_res[actif] <- sum(pf2019[actif])
}
loop_res
matrix()
# Creation Matrice resultat
loop_res <- matrix()
for(actif in actifs){
loop_res[actif] <- sum(pf2019[actif])
}
loop_res
